services:
  postgres:
    image: postgres:15-alpine
    container_name: langgraph_postgres
    environment:
      POSTGRES_DB: langgraph
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./server/storage/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - langgraph_network

  adminer:
    image: adminer:4.8.1
    container_name: langgraph_adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - langgraph_network

  langgraph_server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: langgraph_server
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/langgraph
      DATABASE_POOL_SIZE: 10
      LOG_LEVEL: INFO
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./server:/app/server
      - ./langgraph.json:/app/langgraph.json
      - ./agents:/app/agents
    command: >
      bash -c "if [ \"$DEBUG\" = \"1\" ]; then
        uv run uvicorn server.main:app --host 0.0.0.0 --port 8000 --reload;
      else
        uv run uvicorn server.main:app --host 0.0.0.0 --port 8000;
      fi"
    networks:
      - langgraph_network

volumes:
  postgres_data:
    driver: local

networks:
  langgraph_network:
    driver: bridge
